{
  "swagger": "2.0",
  "info": {
    "title": "Grafeas API",
    "description": "An API to insert and retrieve annotations on cloud artifacts.",
    "version": "0.1",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "GetOccurrence",
        "description": "Returns the requested occurrence",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrencesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Occurrence"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "grafeas"
        ],
        "operationId": "DeleteOccurrence",
        "description": "Deletes the given occurrence from the system.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrencesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        }
      },
      "put": {
        "tags": [
          "grafeas"
        ],
        "operationId": "UpdateOccurrence",
        "description": "Updates an existing occurrence.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the occurrence.\nShould be of the form \"projects\/{project_id}\/occurrences\/{occurrence_id}\".",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrencesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrence",
            "description": "The updated occurrence.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Occurrence"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Occurrence"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/occurrences": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "ListOccurrences",
        "description": "Lists active occurrences for a given project\/Digest.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `parent`. This contains the projectId for example: projects\/{project_id}",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "The filter expression.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Number of occurrences to return in the list.",
            "in": "query",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ListOccurrencesResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "grafeas"
        ],
        "operationId": "CreateOccurrence",
        "description": "Creates a new occurrence.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `parent`. This field contains the projectId for example: \"projects\/{project_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrence",
            "description": "The occurrence to be inserted",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Occurrence"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Occurrence"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "GetOccurrenceNote",
        "description": "Gets the note that this occurrence is attached to.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "occurrencesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/notes/{notesId}": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "GetNote",
        "description": "Returns the requested occurrence",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the note in the form\n\"projects\/{project_id}\/notes\/{note_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "grafeas"
        ],
        "operationId": "DeleteNote",
        "description": "Deletes the given note from the system.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the note in the form\n\"projects\/{project_id}\/notes\/{note_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        }
      },
      "put": {
        "tags": [
          "grafeas"
        ],
        "operationId": "UpdateNote",
        "description": "Updates an existing note.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the note.\nShould be of the form \"projects\/{project_id}\/notes\/{note_id}\".",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "note",
            "description": "The updated note.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/notes": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "ListNotes",
        "description": "Lists all notes for a given project.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `parent`. This field contains the projectId for example:\n\"project\/{project_id}",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "The filter expression.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Number of notes to return in the list.",
            "in": "query",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ListNotesResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "grafeas"
        ],
        "operationId": "CreateNote",
        "description": "Creates a new note.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `parent`. This field contains the projectId for example:\n\"project\/{project_id}",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "noteId",
            "description": "The ID to use for this note.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note",
            "description": "The Note to be inserted",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "ListNoteOccurrences",
        "description": "Lists the names of Occurrences linked to a particular Note.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name field will contain the note name for example:\n  \"project\/{project_id}\/notes\/{note_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notesId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "The filter expression.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Number of notes to return in the list.",
            "in": "query",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ListNoteOccurrencesResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/operations": {
      "post": {
        "tags": [
          "grafeas"
        ],
        "operationId": "CreateOperation",
        "description": "Creates a new operation",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `parent`. The projectId that this operation should be created under.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "description": "The ID to use for this operation. If empty a random string will be used.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The request body.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateOperationRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/operations": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "ListOperations",
        "description": "Lists all operations for a given project.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `parent`. This field contains the projectId for example:\n\"project\/{project_id}",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "The filter expression.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Number of operations to return in the list.",
            "in": "query",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ListOperationsResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{projectsId}/operations/{operationsId}": {
      "get": {
        "tags": [
          "grafeas"
        ],
        "operationId": "GetOperation",
        "description": "Returns the requested occurrence",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the operation in the form\n\"projects\/{project_id}\/operations\/{operation_id}\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationsId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "grafeas"
        ],
        "operationId": "UpdateOperation",
        "description": "Updates an existing operation returns an error if operation\n does not exist. The only valid operations are to update mark the done bit\nchange the result.",
        "parameters": [
          {
            "name": "projectsId",
            "description": "Part of `name`. The name of the Operation.\nShould be of the form \"projects\/{project_id}\/operations\/{operation_id}\".",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationsId",
            "description": "Part of `name`. See documentation of `projectsId`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The request body.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateOperationRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "grafeas"
      ],
      "operationId": "DeleteOperation",
      "description": "Deletes the given operation from the system.",
      "parameters": [
        {
          "name": "projectsId",
          "description": "Part of `name`. The name of the note in the form\n\"projects\/{project_id}\/operations\/{operation_id}\"",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "operationsId",
          "description": "Part of `name`. See documentation of `projectsId`.",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "default": {
          "description": "Successful operation",
          "schema": {
            "$ref": "#/definitions/Empty"
          }
        }
      }
    }
  },
  "definitions": {
    "Occurrence": {
      "id": "Occurrence",
      "description": "Occurrence includes information about analysis occurrences for an image.\n``",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"\n@OutputOnly",
          "type": "string"
        },
        "resourceUrl": {
          "description": "The unique url of the image or container for which the occurrence applies.\nExample: https:\/\/gcr.io\/project\/image@sha256:foo\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "noteName": {
          "description": "An analysis note associated with this image, in the form\n\"projects\/{project_id}\/notes\/{note_id}\"\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "kind": {
          "description": "This explicitly denotes which of the occurrence details is specified.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "enum": [
            "CUSTOM",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY"
          ]
        },
        "customDetails": {
          "description": "Details of the custom note.",
          "$ref": "#/definitions/CustomDetails"
        },
        "vulnerabilityDetails": {
          "description": "Details of a security vulnerability note.",
          "$ref": "#/definitions/VulnerabilityDetails"
        },
        "buildDetails": {
          "description": "Build details for a verifiable build.",
          "$ref": "#/definitions/BuildDetails"
        },
        "derivedImage": {
          "description": "Describes how this resource derives from the basis\nin the associated note.",
          "$ref": "#/definitions/Derived"
        },
        "installation": {
          "description": "Describes the installation of a package on the linked resource.",
          "$ref": "#/definitions/Installation"
        },
        "deployment": {
          "description": "Describes the deployment of an artifact on a runtime.",
          "$ref": "#/definitions/Deployment"
        },
        "discovered": {
          "description": "Describes the initial scan status for this resource.",
          "$ref": "#/definitions/Discovered"
        },
        "attestation": {
          "description": "Describes an attestation of an artifact.",
          "$ref": "#/definitions/Attestation"
        },
        "remediation": {
          "description": "A description of actions that can be taken to remedy the note",
          "type": "string"
        },
        "createTime": {
          "description": "The time this occurrence was created.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "The time this occurrence was last updated.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        },
        "operationName": {
          "description": "The name of the operation that created this note.",
          "type": "string"
        }
      }
    },
    "CustomDetails": {
      "id": "CustomDetails",
      "description": "Details of the custom note type",
      "type": "object",
      "properties": {
        "description": {
          "description": "A description of location of a custom note.",
          "type": "string"
        }
      }
    },
    "VulnerabilityDetails": {
      "id": "VulnerabilityDetails",
      "description": "Used by Occurrence to point to where the vulnerability exists and how\nto fix it.",
      "type": "object",
      "properties": {
        "affectedLocation": {
          "description": "The location of the vulnerability.",
          "$ref": "#/definitions/VulnerabilityLocation"
        },
        "fixedLocation": {
          "description": "The location of the available fix for vulnerability.",
          "$ref": "#/definitions/VulnerabilityLocation"
        },
        "type": {
          "description": "The type of package; whether native or non native(ruby gems,\nnode.js packages etc)",
          "type": "string"
        },
        "severity": {
          "description": "The note provider assigned Severity of the vulnerability.\n@OutputOnly",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "cvssScore": {
          "description": "The CVSS score of this vulnerability. CVSS score is on a scale of 0-10\nwhere 0 indicates low severity and 10 indicates high severity.\n@OutputOnly",
          "type": "number",
          "format": "float"
        },
        "packageIssue": {
          "description": "The set of affected locations and their fixes (if available) within\nthe associated resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageIssue"
          }
        }
      }
    },
    "VulnerabilityLocation": {
      "id": "VulnerabilityLocation",
      "description": "The location of the vulnerability",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https:\/\/cpe.mitre.org\/specification\/)\nformat. Examples include distro or storage location for vulnerable jar.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "package": {
          "description": "The package being described.",
          "type": "string"
        },
        "version": {
          "description": "The version of the package being described.\nThis field can be used as a filter in list requests.",
          "$ref": "#/definitions/Version"
        }
      }
    },
    "Version": {
      "id": "Version",
      "description": "Version contains structured information about the version of the package.\nFor a discussion of this in Debian\/Ubuntu:\nhttp:\/\/serverfault.com\/questions\/604541\/debian-packages-version-convention\nFor a discussion of this in Redhat\/Fedora\/Centos:\nhttp:\/\/blog.jasonantman.com\/2014\/07\/how-yum-and-rpm-compare-versions\/",
      "type": "object",
      "properties": {
        "epoch": {
          "description": "Used to correct mistakes in the version numbering scheme.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The main part of the version name.",
          "type": "string"
        },
        "revision": {
          "description": "The iteration of the package build from the above version.",
          "type": "string"
        },
        "kind": {
          "description": "Distinguish between sentinel MIN\/MAX versions and normal versions.\nIf kind is not NORMAL, then the other fields are ignored.",
          "type": "string",
          "enum": [
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ]
        }
      }
    },
    "PackageIssue": {
      "id": "PackageIssue",
      "description": "This message wraps a location affected by a vulnerability and its\nassociated fix (if one is available).",
      "type": "object",
      "properties": {
        "affectedLocation": {
          "description": "The location of the vulnerability.",
          "$ref": "#/definitions/VulnerabilityLocation"
        },
        "fixedLocation": {
          "description": "The location of the available fix for vulnerability.",
          "$ref": "#/definitions/VulnerabilityLocation"
        },
        "severityName": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.",
          "type": "string"
        }
      }
    },
    "BuildDetails": {
      "id": "BuildDetails",
      "description": "Message encapsulating build provenance details",
      "type": "object",
      "properties": {
        "provenance": {
          "description": "The actual provenance",
          "$ref": "#/definitions/BuildProvenance"
        },
        "provenanceBytes": {
          "description": "Serialized json representation of the provenance, used in generating the\nBuildSignature in the corresponding Result. After verifying the signature,\nprovenance_bytes can be unmarshalled and compared to the provenance to\nconfirm that it is unchanged. A base64-encoded string representation of the\nprovenance bytes is used for the signature in order to interoperate with\nopenssl which expects this format for signature verification.\n\nThe serialized form is captured both to avoid ambiguity in how the\nprovenance is marshalled to json as well to prevent incompatibilities with\nfuture changes.",
          "type": "string"
        }
      }
    },
    "BuildProvenance": {
      "id": "BuildProvenance",
      "description": "Provenance of a build. Contains all information needed to verify the full\ndetails about the build from source to completion.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the build.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project.",
          "type": "string"
        },
        "projectNum": {
          "description": "Numerical ID of the project.",
          "type": "string",
          "format": "int64"
        },
        "commands": {
          "description": "Commands requested by the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Command"
          }
        },
        "builtArtifacts": {
          "description": "Output of the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "createTime": {
          "description": "Time at which the build was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "startTime": {
          "description": "Time at which execution of the build was started.",
          "type": "string",
          "format": "google-datetime"
        },
        "finishTime": {
          "description": "Time at which execution of the build was finished.",
          "type": "string",
          "format": "google-datetime"
        },
        "userId": {
          "description": "GAIA ID of end user who initiated this build; at the time that the\nBuildProvenance is uploaded to Analysis, this will be resolved to the\nprimary e-mail address of the user and stored in the Creator field.",
          "type": "string",
          "format": "int64"
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the\nuser's e-mail address at the time the build was initiated; this address may\nnot represent the same end-user for all time.",
          "type": "string"
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs were written.",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Details of the Source input to the build.",
          "$ref": "#/definitions/Source"
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "buildOptions": {
          "description": "Special options applied to this build. This is a catch-all field where\nbuild providers can enter any desired additional details.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "builderVersion": {
          "description": "Version string of the builder at the time this build was executed.",
          "type": "string"
        }
      }
    },
    "Command": {
      "id": "Command",
      "description": "Command describes a step performed as part of the build pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the command, as presented on the command line, or if the command is\npackaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "env": {
          "description": "Environment variables set before running this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "Command-line arguments used when executing this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running\nthis Command.",
          "type": "string"
        },
        "id": {
          "description": "Optional unique identifier for this Command, used in wait_for to reference\nthis Command as a dependency.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the Command(s) that this Command depends on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Artifact": {
      "id": "Artifact",
      "description": "Artifact describes a build product.",
      "type": "object",
      "properties": {
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a\ncontainer.",
          "type": "string"
        },
        "id": {
          "description": "Artifact ID, if any; for container images, this will be a URL by digest\nlike gcr.io\/projectID\/imagename@sha256:123456",
          "type": "string"
        },
        "names": {
          "description": "Related artifact names. This may be the path to a binary or jar file, or in\nthe case of a container build, the name used to push the container image to\nGoogle Container Registry, as presented to `docker push`. Note that a\nsingle Artifact ID can have multiple names, for example if two tags are\napplied to one image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Source": {
      "id": "Source",
      "description": "Source describes the location of the source used for the build.",
      "type": "object",
      "properties": {
        "storageSource": {
          "description": "If provided, get the source from this location in in Google Cloud\nStorage.",
          "$ref": "#/definitions/StorageSource"
        },
        "repoSource": {
          "description": "If provided, get source from this location in a Cloud Repo.",
          "$ref": "#/definitions/RepoSource"
        },
        "artifactStorageSource": {
          "description": "If provided, the input binary artifacts for the build came from this\nlocation.",
          "$ref": "#/definitions/StorageSource"
        },
        "sourceContext": {
          "description": "If provided, the source code used for the build came from this location.",
          "$ref": "#/definitions/ExtendedSourceContext"
        },
        "additionalSourceContexts": {
          "description": "If provided, some of the source code used for the build may be found in\nthese locations, in the case where the source repository had multiple\nremotes or submodules. This list will not include the context specified in\nthe source_context field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedSourceContext"
          }
        },
        "fileHashes": {
          "description": "Hash(es) of the build source, which can be used to verify that the original\nsource integrity was maintained in the build.\n\nThe keys to this map are file paths used as build source and the values\ncontain the hash values for those files.\n\nIf the build source came in a single package such as a gzipped tarfile\n(.tar.gz), the FileHash will be for the single path to that file.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FileHashes"
          }
        }
      }
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "StorageSource describes the location of the source in an archive file in\nGoogle Cloud Storage.",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing source (see [Bucket Name\nRequirements]\n(https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing source.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RepoSource": {
      "id": "RepoSource",
      "description": "RepoSource describes the location of the source in a Google Cloud Source\nRepository.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "ID of the project that owns the repo.",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the repo.",
          "type": "string"
        },
        "branchName": {
          "description": "Name of the branch to build.",
          "type": "string"
        },
        "tagName": {
          "description": "Name of the tag to build.",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        }
      }
    },
    "ExtendedSourceContext": {
      "id": "ExtendedSourceContext",
      "description": "An ExtendedSourceContext is a SourceContext combined with additional\ndetails describing the context.",
      "type": "object",
      "properties": {
        "context": {
          "description": "Any source context.",
          "$ref": "#/definitions/SourceContext"
        },
        "labels": {
          "description": "Labels with user defined metadata.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SourceContext": {
      "id": "SourceContext",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together\nwith a path point to a unique revision of a single file or directory.",
      "type": "object",
      "properties": {
        "cloudRepo": {
          "description": "A SourceContext referring to a revision in a cloud repo.",
          "$ref": "#/definitions/CloudRepoSourceContext"
        },
        "cloudWorkspace": {
          "description": "A SourceContext referring to a snapshot in a cloud workspace.",
          "$ref": "#/definitions/CloudWorkspaceSourceContext"
        },
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "#/definitions/GerritSourceContext"
        },
        "git": {
          "description": "A SourceContext referring to any third party Git repo (e.g. GitHub).",
          "$ref": "#/definitions/GitSourceContext"
        }
      }
    },
    "CloudRepoSourceContext": {
      "id": "CloudRepoSourceContext",
      "description": "A CloudRepoSourceContext denotes a particular revision in a cloud\nrepo (a repo hosted by the Google Cloud Platform).",
      "type": "object",
      "properties": {
        "repoId": {
          "description": "The ID of the repo.",
          "$ref": "#/definitions/RepoId"
        },
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        },
        "aliasName": {
          "description": "The name of an alias (branch, tag, etc.).",
          "type": "string"
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "#/definitions/AliasContext"
        }
      }
    },
    "RepoId": {
      "id": "RepoId",
      "description": "A unique identifier for a cloud repo.",
      "type": "object",
      "properties": {
        "projectRepoId": {
          "description": "A combination of a project ID and a repo name.",
          "$ref": "#/definitions/ProjectRepoId"
        },
        "uid": {
          "description": "A server-assigned, globally unique identifier.",
          "type": "string"
        }
      }
    },
    "ProjectRepoId": {
      "id": "ProjectRepoId",
      "description": "Selects a repo using a Google Cloud Platform project ID\n(e.g. winged-cargo-31) and a repo name within that project.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        },
        "repoName": {
          "description": "The name of the repo. Leave empty for the default repo.",
          "type": "string"
        }
      }
    },
    "AliasContext": {
      "id": "AliasContext",
      "description": "An alias to a repo revision.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The alias kind.",
          "type": "string",
          "enum": [
            "ANY",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ]
        },
        "name": {
          "description": "The alias name.",
          "type": "string"
        }
      }
    },
    "CloudWorkspaceSourceContext": {
      "id": "CloudWorkspaceSourceContext",
      "description": "A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.",
      "type": "object",
      "properties": {
        "workspaceId": {
          "description": "The ID of the workspace.",
          "$ref": "#/definitions/CloudWorkspaceId"
        },
        "snapshotId": {
          "description": "The ID of the snapshot.\nAn empty snapshot_id refers to the most recent snapshot.",
          "type": "string"
        }
      }
    },
    "CloudWorkspaceId": {
      "id": "CloudWorkspaceId",
      "description": "A CloudWorkspaceId is a unique identifier for a cloud workspace.\nA cloud workspace is a place associated with a repo where modified files\ncan be stored before they are committed.",
      "type": "object",
      "properties": {
        "repoId": {
          "description": "The ID of the repo containing the workspace.",
          "$ref": "#/definitions/RepoId"
        },
        "name": {
          "description": "The unique name of the workspace within the repo.  This is the name\nchosen by the client in the Source API's CreateWorkspace method.",
          "type": "string"
        }
      }
    },
    "GerritSourceContext": {
      "id": "GerritSourceContext",
      "description": "A SourceContext referring to a Gerrit project.",
      "type": "object",
      "properties": {
        "hostUri": {
          "description": "The URI of a running Gerrit instance.",
          "type": "string"
        },
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so\n\"project\/subproject\" is a valid project name.\nThe \"repo name\" is hostURI\/project.",
          "type": "string"
        },
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        },
        "aliasName": {
          "description": "The name of an alias (branch, tag, etc.).",
          "type": "string"
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "$ref": "#/definitions/AliasContext"
        }
      }
    },
    "GitSourceContext": {
      "id": "GitSourceContext",
      "description": "A GitSourceContext denotes a particular revision in a third party Git\nrepository (e.g. GitHub).",
      "type": "object",
      "properties": {
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        },
        "revisionId": {
          "description": "Git commit hash.\nrequired.",
          "type": "string"
        }
      }
    },
    "FileHashes": {
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in Source\nmessages to verify integrity of source input to the build.",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hash"
          }
        }
      }
    },
    "Hash": {
      "id": "Hash",
      "description": "Container message for hash values.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of hash that was performed.",
          "type": "string",
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ]
        },
        "value": {
          "description": "The hash value.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Derived": {
      "id": "Derived",
      "description": "Derived describes the derived image portion (Occurrence) of the\nDockerImage relationship.  This image would be produced from a Dockerfile\nwith FROM <DockerImage.Basis in attached Note>.",
      "type": "object",
      "properties": {
        "fingerprint": {
          "description": "The fingerprint of the derived image",
          "$ref": "#/definitions/Fingerprint"
        },
        "distance": {
          "description": "The number of layers by which this image differs from\nthe associated image basis.\n@OutputOnly",
          "type": "integer",
          "format": "uint32"
        },
        "layerInfo": {
          "description": "This contains layer-specific metadata, if populated it\nhas length \u201Cdistance\u201D and is ordered with [distance] being the\nlayer immediately following the base image and [1]\nbeing the final layer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Layer"
          }
        },
        "baseResourceUrl": {
          "description": "This contains the base image url for the derived image Occurrence\n@OutputOnly",
          "type": "string"
        }
      }
    },
    "Fingerprint": {
      "id": "Fingerprint",
      "description": "A set of properties that uniquely identify a given Docker image.",
      "type": "object",
      "properties": {
        "v1Name": {
          "description": "The layer-id of the final layer in the Docker image\u2019s v1\nrepresentation.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "v2Blob": {
          "description": "The ordered list of v2 blobs that represent a given image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "v2Name": {
          "description": "The name of the image\u2019s v2 blobs computed via:\n  [bottom] := v2_blobbottom := sha256(v2_blob[N] + \u201C \u201D + v2_name[N+1])\nOnly the name of the final blob is kept.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string"
        }
      }
    },
    "Layer": {
      "id": "Layer",
      "description": "Layer holds metadata specific to a layer of a Docker image.",
      "type": "object",
      "properties": {
        "directive": {
          "description": "The recovered Dockerfile directive used to construct this layer.",
          "type": "string",
          "enum": [
            "UNKNOWN_DIRECTIVE",
            "MAINTAINER",
            "RUN",
            "CMD",
            "LABEL",
            "EXPOSE",
            "ENV",
            "ADD",
            "COPY",
            "ENTRYPOINT",
            "VOLUME",
            "USER",
            "WORKDIR",
            "ARG",
            "ONBUILD",
            "STOPSIGNAL",
            "HEALTHCHECK",
            "SHELL"
          ]
        },
        "arguments": {
          "description": "The recovered arguments to the Dockerfile directive.",
          "type": "string"
        }
      }
    },
    "Installation": {
      "id": "Installation",
      "description": "This represents how a particular software package may be installed on\na system.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the installed package.\n@OutputOnly",
          "type": "string"
        },
        "location": {
          "description": "All of the places within the filesystem versions of this package\nhave been found.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "An occurrence of a particular package installation found within a\nsystem's filesystem.\ne.g. glibc was found in \/var\/lib\/dpkg\/status",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https:\/\/cpe.mitre.org\/specification\/)\ndenoting the package manager version distributing a package.",
          "type": "string"
        },
        "version": {
          "description": "The version installed at this location.",
          "$ref": "#/definitions/Version"
        },
        "path": {
          "description": "The path from which we gathered that this package\/version is installed.",
          "type": "string"
        }
      }
    },
    "Deployment": {
      "id": "Deployment",
      "description": "The period during which some deployable was active in a runtime.",
      "type": "object",
      "properties": {
        "userEmail": {
          "description": "Identity of the user that triggered this deployment.",
          "type": "string"
        },
        "deployTime": {
          "description": "Beginning of the lifetime of this deployment.",
          "type": "string",
          "format": "google-datetime"
        },
        "undeployTime": {
          "description": "End of the lifetime of this deployment.",
          "type": "string",
          "format": "google-datetime"
        },
        "config": {
          "description": "Configuration used to create this deployment.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "address": {
          "description": "Address of the runtime element hosting this deployment.",
          "type": "string"
        }
      }
    },
    "Discovered": {
      "id": "Discovered",
      "description": "Provides information about the scan status of a discovered resource.",
      "type": "object",
      "properties": {
        "operation": {
          "description": "An operation that indicates the status of the current scan.\n@OutputOnly",
          "$ref": "#/definitions/Operation"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations\/some\/unique\/name`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "#/definitions/Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`\/`Create`\/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https:\/\/github.com\/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security\/privacy reasons.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "Attestation": {
      "id": "Attestation",
      "description": "Occurrence that represents a single \"attestation\".  The authenticity of an\nAttestation can be verified using the attached signature. If the verifier\ntrusts the public key of the signer, then verifying the signature is\nsufficient to establish trust.  In this circumstance, the\nAttestationAuthority to which this Attestation is attached is primarily\nuseful for look-up (how to find this Attestation if you already know the\nAuthority and artifact to be verified) and intent (which authority was this\nattestation intended to sign for).",
      "type": "object",
      "properties": {
        "pgpSignedAttestation": {
          "$ref": "#/definitions/PgpSignedAttestation"
        }
      }
    },
    "PgpSignedAttestation": {
      "id": "PgpSignedAttestation",
      "description": "An attestation wrapper with a PGP-compatible signature.\nThis message only supports ATTACHED signatures, where the payload that is\nsigned is included alongside the signature itself in the same file.",
      "type": "object",
      "properties": {
        "signature": {
          "description": "The raw content of the signature, as output by gpg or equivalent.  Since\nthis message only supports attached signatures, the payload that was signed\nmust be attached. While the signature format supported is dependent on the\nverification implementation, currently only ASCII-armored (`--armor` to\ngpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are\nsupported.\nConcretely, `gpg --sign --armor --output=signature.gpg payload.json` will\ncreate the signature content expected in this field in `signature.gpg` for\nthe `payload.json` attestation payload.",
          "type": "string"
        },
        "contentType": {
          "description": "Type (e.g. schema) of the attestation payload that was signed.\nThe verifier must ensure that the provided type is one that the verifier\nsupports, and that the attestation payload is a valid instantiation of that\ntype (e.g. by validating a JSON schema).",
          "type": "string",
          "enum": [
            "UNSET",
            "SIMPLE_SIGNING_JSON"
          ]
        },
        "pgpKeyId": {
          "description": "The ID of the key, as output by `gpg --list-keys`.  This should be 8\nhexadecimal digits, capitalized.  e.g.\n$ gpg --list-keys pub\n2048R\/A663AEEA 2017-08-01 ui Fake Name\n<example-attesting-user@google.com>\nIn the above example, the `key_id` is \"A663AEEA\".\nNote that in practice this ID is the last 64 bits of the key fingerprint.",
          "type": "string"
        }
      }
    },
    "ListOccurrencesResponse": {
      "id": "ListOccurrencesResponse",
      "description": "Response including listed active occurrences.",
      "type": "object",
      "properties": {
        "occurrences": {
          "description": "The occurrences requested.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Occurrence"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the List response. It should be used as\npage_token for the following request. An empty value means no more results.",
          "type": "string"
        }
      }
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "Response including listed operations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "The operations requested.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the List response. It should be used as\npage_token for the following request. An empty value means no more results.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "Note": {
      "id": "Note",
      "description": "Note provides a detailed description of a note using information\nfrom the provider of the note.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the note in the form\n\"projects\/{project_id}\/notes\/{note_id}\"",
          "type": "string"
        },
        "shortDescription": {
          "description": "A one sentence description of this note",
          "type": "string"
        },
        "longDescription": {
          "description": "A detailed description of this note",
          "type": "string"
        },
        "kind": {
          "description": "This explicitly denotes which kind of note is specified.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "enum": [
            "CUSTOM",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY"
          ]
        },
        "vulnerabilityType": {
          "description": "A package vulnerability type of note.",
          "$ref": "#/definitions/VulnerabilityType"
        },
        "buildType": {
          "description": "Build provenance type for a verifiable build.",
          "$ref": "#/definitions/BuildType"
        },
        "baseImage": {
          "description": "A note describing a base image.",
          "$ref": "#/definitions/Basis"
        },
        "package": {
          "description": "A note describing a package hosted by various package managers.",
          "$ref": "#/definitions/Package"
        },
        "deployable": {
          "description": "A note describing something that can be deployed.",
          "$ref": "#/definitions/Deployable"
        },
        "discovery": {
          "description": "A note describing a project\/analysis type.",
          "$ref": "#/definitions/Discovery"
        },
        "attestationAuthority": {
          "description": "A note describing an attestation role.",
          "$ref": "#/definitions/AttestationAuthority"
        },
        "relatedUrl": {
          "description": "Urls associated with this note",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedUrl"
          }
        },
        "expirationTime": {
          "description": "Time of expiration for this Note, null if Note currently does not\nexpire.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "The time this note was created.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "The time this note was last updated.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        },
        "operationName": {
          "description": "The name of the operation that created this note.",
          "type": "string"
        },
        "relatedNoteNames": {
          "description": "Other notes related to this note.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VulnerabilityType": {
      "id": "VulnerabilityType",
      "description": "VulnerabilityType provides metadata about a security vulnerability.",
      "type": "object",
      "properties": {
        "cvssScore": {
          "description": "The CVSS score for this Vulnerability.",
          "type": "number",
          "format": "float"
        },
        "severity": {
          "description": "Note provider assigned impact of the vulnerability",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "package_type": {
          "description": "The type of package; whether native or non native(ruby gems,\nnode.js packages etc)",
          "type": "string"
        },
        "details": {
          "description": "All information about the package to specifically identify this\nvulnerability. One entry per (version range and cpe_uri) the\npackage vulnerability has manifested in.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Detail"
          }
        }
      }
    },
    "Detail": {
      "id": "Detail",
      "description": "Identifies all occurrences of this vulnerability in the package for a\nspecific distro\/location\nFor example: glibc in cpe:\/o:debian:debian_linux:8 for versions 2.1 - 2.2",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https:\/\/cpe.mitre.org\/specification\/) in\nwhich the vulnerability manifests.  Examples include distro or storage\nlocation for vulnerable jar.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "package": {
          "description": "The name of the package where the vulnerability was found.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "minAffectedVersion": {
          "description": "The min version of the package in which the vulnerability exists.",
          "$ref": "#/definitions/Version"
        },
        "maxAffectedVersion": {
          "description": "The max version of the package in which the vulnerability exists.\nThis field can be used as a filter in list requests.",
          "$ref": "#/definitions/Version"
        },
        "severityName": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.",
          "type": "string"
        },
        "description": {
          "description": "A vendor-specific description of this note.",
          "type": "string"
        },
        "fixedLocation": {
          "description": "The fix for this specific package version.",
          "$ref": "#/definitions/VulnerabilityLocation"
        }
      }
    },
    "BuildType": {
      "id": "BuildType",
      "description": "Note holding the version of the provider's builder and the signature of\nthe provenance message in linked BuildDetails.",
      "type": "object",
      "properties": {
        "builderVersion": {
          "description": "Version of the builder which produced this Note.",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the build in Occurrences pointing to the Note containing this\nBuilderDetails.",
          "$ref": "#/definitions/BuildSignature"
        }
      }
    },
    "BuildSignature": {
      "id": "BuildSignature",
      "description": "Message encapsulating signature of the verified build",
      "type": "object",
      "properties": {
        "publicKey": {
          "description": "Public key of the builder which can be used to verify that related\nFindings are valid and unchanged.  If `key_type` is empty this defaults\nto PEM encoded public keys.\n\nThis field may be empty if `key_id` references an external key.\n\nFor Cloud Container Builder based signatures this is a PEM encoded public\nkey. To verify the Cloud Container Builder signature, place the contents of\nthis field into a file (public.pem). The signature field is base64-decoded\ninto its binary representation in signature.bin, and the provenance bytes\nfrom BuildDetails are base64-decoded into a binary representation in\nsigned.bin. OpenSSL can then verify the signature:\n`openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the related BuildProvenance, encoded in a base64 string.",
          "type": "string"
        },
        "keyId": {
          "description": "An ID for the key used to sign.  This could be either an ID for the key\nstored in `public_key` (e.g., the ID or fingerprint for a PGP key, or the\nCN for a cert), or a reference to an external key (e.g., a reference to a\nkey in Cloud KMS).",
          "type": "string"
        },
        "keyType": {
          "description": "The type of the key, either stored in `public_key` or referenced in\n`key_id`",
          "type": "string",
          "enum": [
            "UNSET",
            "PGP_ASCII_ARMORED",
            "PKIX_PEM"
          ]
        }
      }
    },
    "Basis": {
      "id": "Basis",
      "description": "Basis describes the base image portion (Note) of the DockerImage\nrelationship.  Linked occurrences are derived from this or an\nequivalent image via:\n  FROM <Basis.resource_url>\nOr an equivalent reference, e.g. a tag of the resource_url.",
      "type": "object",
      "properties": {
        "resourceUrl": {
          "description": "The resource_url for the resource representing the basis of\nassociated occurrence images.",
          "type": "string"
        },
        "fingerprint": {
          "description": "The fingerprint of the base image",
          "$ref": "#/definitions/Fingerprint"
        }
      }
    },
    "Package": {
      "id": "Package",
      "description": "This represents a particular package that is distributed over\nvarious channels.\ne.g. glibc (aka libc6) is distributed by many, at various versions.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the package.",
          "type": "string"
        },
        "distribution": {
          "description": "The various channels by which a package is distributed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Distribution"
          }
        }
      }
    },
    "Distribution": {
      "id": "Distribution",
      "description": "This represents a particular channel of distribution for a given package.\ne.g. Debian's jessie-backports dpkg mirror",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https:\/\/cpe.mitre.org\/specification\/)\ndenoting the package manager version distributing a package.",
          "type": "string"
        },
        "architecture": {
          "description": "The CPU architecture for which packages in this distribution\nchannel were built",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "X86",
            "X64"
          ]
        },
        "latestVersion": {
          "description": "The latest available version of this package in\nthis distribution channel.",
          "$ref": "#/definitions/Version"
        },
        "maintainer": {
          "description": "A freeform string denoting the maintainer of this package.",
          "type": "string"
        },
        "url": {
          "description": "The distribution channel-specific homepage for this package.",
          "type": "string"
        },
        "description": {
          "description": "The distribution channel-specific description of this package.",
          "type": "string"
        }
      }
    },
    "Deployable": {
      "id": "Deployable",
      "description": "An artifact that can be deployed in some runtime.",
      "type": "object",
      "properties": {
        "resourceUri": {
          "description": "Resource URI for the artifact being deployed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Discovery": {
      "id": "Discovery",
      "description": "Note that indicates a type of analysis and exists in a provider project to\nindicate the status of an analysis on a resource. Absence of an occurrence\nlinked to this note for a resource indicates that analysis hasn't started.",
      "type": "object",
      "properties": {
        "analysisKind": {
          "description": "The kind of analysis that is handled by this discovery.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CUSTOM",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY"
          ]
        }
      }
    },
    "AttestationAuthority": {
      "id": "AttestationAuthority",
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\".  For\nexample, an organization might have one AttestationAuthority for \"QA\" and one\nfor \"build\".  This Note is intended to act strictly as a grouping mechanism\nfor the attached Occurrences (Attestations).  This grouping mechanism also\nprovides a security boundary, since IAM ACLs gate the ability for a principle\nto attach an Occurrence to a given Note.  It also provides a single point of\nlookup to find all attached Attestation Occurrences, even if they don't all\nlive in the same project.",
      "type": "object",
      "properties": {
        "hint": {
          "$ref": "#/definitions/AttestationAuthorityHint"
        }
      }
    },
    "AttestationAuthorityHint": {
      "id": "AttestationAuthorityHint",
      "description": "This submessage provides human-readable hints about the purpose of the\nAttestationAuthority.  Because the name of a Note acts as its resource\nreference, it is important to disambiguate the canonical name of the Note\n(which might be a UUID for security purposes) from \"readable\" names more\nsuitable for debug output.  Note that these hints should NOT be used to\nlook up AttestationAuthorities in security sensitive contexts, such as when\nlooking up Attestations to verify.",
      "type": "object",
      "properties": {
        "humanReadableName": {
          "description": "The human readable name of this Attestation Authority, e.g. \"qa\".",
          "type": "string"
        }
      }
    },
    "RelatedUrl": {
      "id": "RelatedUrl",
      "description": "Metadata for any related url information",
      "type": "object",
      "properties": {
        "url": {
          "description": "Specific url to associate with the note",
          "type": "string"
        },
        "label": {
          "description": "Label to describe usage of the url",
          "type": "string"
        }
      }
    },
    "ListNotesResponse": {
      "id": "ListNotesResponse",
      "description": "Response including listed notes.",
      "type": "object",
      "properties": {
        "notes": {
          "description": "The occurrences requested",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the List response. It should be used as\npage_token for the following request. An empty value means no more result.",
          "type": "string"
        }
      }
    },
    "ListNoteOccurrencesResponse": {
      "id": "ListNoteOccurrencesResponse",
      "description": "Response including listed occurrences for a note.",
      "type": "object",
      "properties": {
        "occurrences": {
          "description": "The occurrences attached to the specified note.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Occurrence"
          }
        },
        "nextPageToken": {
          "description": "Token to receive the next page of notes.",
          "type": "string"
        }
      }
    },
    "CreateOperationRequest": {
      "id": "CreateOperationRequest",
      "description": "Request for creating an operation",
      "type": "object",
      "properties": {
        "operationId": {
          "description": "The ID to use for this operation.",
          "type": "string"
        },
        "operation": {
          "description": "The operation to create.",
          "$ref": "#/definitions/Operation"
        }
      }
    },
    "UpdateOperationRequest": {
      "id": "UpdateOperationRequest",
      "description": "Request for updating an existing operation",
      "type": "object",
      "properties": {
        "operation": {
          "description": "The operation to create.",
          "$ref": "#/definitions/Operation"
        }
      }
    }
  }
}
